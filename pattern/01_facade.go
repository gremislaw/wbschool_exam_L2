package pattern

import "fmt"

/*
	Реализовать паттерн «фасад».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Facade_pattern
*/

// Применяется, когда требуется разбиение сложной системы на подсистемы
//
// Пример: Фасад для библиотеки обработки изображений, который позволяет пользователю легко загружать,
// изменять и сохранять изображения без необходимости вникать в детали работы библиотеки.

// + Изолирует клиентов от компонентов сложной системы.
// + Изменения в сложной системе не влияют на клиентов, если интерфейс остается прежним.
// + Предоставляет удобный интерфейс для взаимодействия со сложной системой.
// - Фасад может не предоставлять весь функционал сложной системы.

// System1 - сложная подсистема
type System1 struct{}

func (d *System1) Start() {
	fmt.Println("Database started.")
}

// System2 - сложная подсистема
type System2 struct{}

func (s *System2) Start() {
	fmt.Println("Server started.")
}

// Facade - простой интерфейс для взаимодействия с подсистемами
type Facade struct {
	sys1     *System1
	sys2     *System2
}

// NewFacade конструктор создания Facade
func NewFacade() *Facade {
	return &Facade{
		sys1:     &System1{},
		sys2:     &System2{},
	}
}

// Start запускает все подсистемы через фасад
func (f *Facade) Start() {
	f.sys1.Start()
	f.sys2.Start()
}

//func main() {
//	facade := NewFacade()
//	facade.Start()
//}